<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xnk.service.dao.evaluation.EvaluationUserWriteRecomItemMapper">
  <resultMap id="BaseResultMap" type="com.xnk.service.api.model.EvaluationUserWriteRecomItem">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="evaluation_id" jdbcType="BIGINT" property="evaluationId" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, evaluation_id, user_id, user_name, type, create_time, update_time
  </sql>
  <!-- 模糊查询 -->
	<sql id="allAndLike">
		<trim suffix="" suffixOverrides=",">
      <if test="evaluationId != null">
        and evaluation_id = #{evaluationId,jdbcType=BIGINT}
      </if>
      <if test="userId != null">
        and user_id = #{userId,jdbcType=BIGINT}
      </if>
      <if test="userName != null">
        and user_name like concat('%',#{userName, jdbcType=VARCHAR},'%')
      </if>
      <if test="type != null">
        and type = #{type,jdbcType=INTEGER}
      </if>
		</trim>
	</sql>
	
  <!-- 总数 -->
	<select id="count" resultType="java.lang.Integer">
	    select count(1) from (
		SELECT user_id,evaluation_id ,GROUP_CONCAT(type) as types from evaluation_user_write_recom_item
		<where><include refid="allAndLike"/>
			<choose>
				<when test="page !=null and page.condition != null and page.condition != ''">
					${page.condition} 
				</when>
			</choose>
		</where>
		  GROUP BY user_id,evaluation_id
		limit #{page.start},#{page.pageSize}
		) a
	</select>
	
    <select id="page" resultMap="BaseResultMap">
		SELECT user_id,evaluation_id ,GROUP_CONCAT(type) as types,user_name,create_time from evaluation_user_write_recom_item
		<where><include refid="allAndLike"/>
			<choose>
				<when test="page !=null and page.condition != null and page.condition != ''">
					${page.condition} 
				</when>
			</choose>
		</where>
		  GROUP BY user_id,evaluation_id
		limit #{page.start},#{page.pageSize}
	</select>
  	<select id="list" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM evaluation_user_write_recom_item
		<where><include refid="allAndLike"/>
			<choose>
				<when test="page !=null and page.condition != null and page.condition != ''">
					${page.condition} 
				</when>
			</choose>
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				order by ${page.orderBy} 
			</when>
		</choose>
	</select>
  <select id="get" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from evaluation_user_write_recom_item
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="delete" parameterType="java.lang.Long">
    delete from evaluation_user_write_recom_item
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.xnk.service.api.model.EvaluationUserWriteRecomItem">
    insert into evaluation_user_write_recom_item (id, evaluation_id, user_id, 
      user_name, type, create_time, 
      update_time)
    values (#{id,jdbcType=BIGINT}, #{evaluationId,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, 
      #{userName,jdbcType=VARCHAR}, #{type,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  
  <!-- 批量插入 -->
	<insert id="insertBatch" parameterType="java.util.List">
		insert into evaluation_user_write_recom_item (
		id, evaluation_id,
		user_id,
		user_name, type, create_time,
		update_time
		)
		values
		<foreach collection="list" item="item" index="index"
			separator=",">
			(
			<trim suffix="" suffixOverrides=",">
				#{item.id,jdbcType=BIGINT},
				#{item.evaluationId,jdbcType=BIGINT},
				#{item.userId,jdbcType=BIGINT},
				#{item.userName,jdbcType=VARCHAR},
				#{item.type,jdbcType=INTEGER},
				#{item.createTime,jdbcType=TIMESTAMP},
				#{item.updateTime,jdbcType=TIMESTAMP}
			</trim>
			)
		</foreach>

	</insert>
	
  <update id="update" parameterType="com.xnk.service.api.model.EvaluationUserWriteRecomItem">
    update evaluation_user_write_recom_item
    <set>
      <if test="evaluationId != null">
        evaluation_id = #{evaluationId,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="userName != null">
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  
</mapper>